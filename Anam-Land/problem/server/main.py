#!/usr/bin/env python3
import random
import json
from secret import FLAG

topic = '''
   _    _  _    _    __  __  _       _    _  _  ___  
  /_\  | \| |  /_\  |  \/  || |     /_\  | \| ||   \ 
 / _ \ | .` | / _ \ | |\/| || |__  / _ \ | .` || |) |
/_/ \_\|_|\_|/_/ \_\|_|  |_||____|/_/ \_\|_|\_||___/ 
======================================================
Welcome to my Anam-Land! You will play a game of roulette.
I make the random generator perfectly so you don't have
to worry about the fairness. Just test your luck!
If you are lucky, you can get the flag :)
'''

N = 2**128
BITS = 64
key = random.randrange(2**BITS)

class RNG:
    def __init__(self):
        self.pub = [260288377891444370372615148009023640057294926547602419331406531383682223097787288755377467188515435381259752760746, 322734358011758862401399370931929863052553602421714393280581187496537763321855751120439457234561080720455397490349, 88092359256403564783665281993130133541226601877969436905267415353041909757324746080398461245281826552421872983184, 601684701300110945921036937572461050140352984401874675917155063594305583314408001377505387079690115000992094388032, 193814643850628739958152744041743058858484088269609293429408490294552345005365776962194365813796130165113184925621, 51510606914703888409341761261103125433754505248101513818740574350196563260563818621033222936301769697693287778876, 502702742677974540308798846750017003106263447846689040491266463798703222616320168069962523670400796196343460832764, 86989835783586738140883150201327374176124588410464188692884973334241681514702306716383785095564084499563152815246, 515511378187957676256419959601984383408150348796281656976955880729383340611785836962788715725367023923811376366815, 119845178983025037005174732553931706284024826223176718982111213579707091766057320315419827781508690979405126062061, 207867794910968434026003881920029657224591376925067493713968219177352819759854486838459675245909787840416982457750, 239399986603216503029402544900610984881160101923294396792665204486222975420081300661354603175384772323551980155480, 306665236132315336961576566094908486196981556971172170145299174389720334940261512384837950321772782983903454058725, 558130280550827068212352576387713811027468233905173944680355562037815257403446113128895937326412940859588204361963, 123471925832174980344066571541132411467266736109103860421447462536930482316849470378251137263190870093702164003085, 146089706629012142384661350988216882483919264673129621404831339166566056469572087759748854086023354002641923689390, 446097892684389219719742914373867457099954499449824602532333181169038249081395758983133906564840000962001976506057, 204029934276059225352901134714823317920576872465404508059719045291560482057171052793698580294637069578017200124432, 412333373143000457741307988470055504576675151299345387733692618218275177027643785881042018546460452418506341967356, 171418413940299360322712423004114364681865276057786947919043883366302567169869592290151559269290446563185553350080, 401593473337411114258578268223784182795068785564101722335215736591292301602077751376477881087346810602041717163104, 204003688543820354337113938494979311981574571424756883928855286926734578790400322291262042466654212377708831289347, 555612926496986208337317871061684502803594375654879680702581403987248292734014139717756900004905653768133795128973, 462785612281910846822645629160953231999037081137615204334672445418078665808070086646804794186256411131615189487813, 77961961618173276050791733447969083544152711482614563228085622136316525792569658878271751219358260960116292497570, 517789370221435419776588087490678991824021927945387533283088388790482913301281733115458601414668206432512998904516, 281870328340314395150658482932699114581743200279996227099530744754750289102031518563761975024621347281374162044877, 60204977937304337797770029325498234132893935850995809547662640467737007197647697381430963693698522962733473746281, 395936787836195675178388359277761575381601972138693830435288611414489963379399027975388601714741876831895709497105, 90921357930302550361827901642067284191268695594120415817202534786924330392421221829361546010764453051928814876700, 238523907687908075601117120608130752369082206676107364350347208286323115036939777325067473364465438898353765093766, 277515010021988996116595000889051160811249034599876556819610707794016612800585201793339332495839495779526504613846, 187215937497318890199135284983515062319988136636108170852591598862524363777870331888216170582220867500042557737272, 411220029331367081136918789112083235781237730079305782620378994961505282090962448446931628731751970521853108685376, 433613620456520979627974441205441942311133790647897226320388205340695256818608765746266662314499649013982035729731, 509613591091334719216567967380183602959933686617275815879939870258332674755345348802452058256788513837941126219238, 352708166022264045150842358964512080203788453464883319778517822047480718640858804837886057264514786742694419419735, 486272357335492500753956372299255798603575392697018451800774427752724312455328655650777691830508441976819499348269, 1291533249748053824342851185451970324561531056195308125673915619130780992270420765078102812914222570167615953050, 520707501920546816250915326019351261090208813534492143136485743644939372232638461802625700978801768541842624647274, 272359456788721692618768612190222453304838934916628492701462591276450281926223118982602858211688086607842351391495, 119534191144397164327417397593964021477488683311215644770010641745736480039094209273092223959694752862193314087240, 394945131470603614379767959704654538029557537489316246092982427107641617479545488843535929537498546432123287486437, 395979428475608101765230328218274625986674115712051764903732593018454264017781340199795540039285257513438842708672, 322101629493887220159199019582810892418957941946300752245249462093036697035162212557261470168522953435341905295650, 60610073299031334532969727880668989046838926047395613981473675505442500833244137863225398782029541439420403686372, 492582431835005621441922899995666806499437611069193099072247918597047415020628078410849119945608854080040163699375, 356290614124448077864884136922409291617128370298210212357882465167338600485728936925448944675136056707929560080237, 469737185578879122378016959759297464132272432425745272107998534197014940235018335349886398896979254122985841196030, 522871107234918024128768136315123497251902274681110489386594944387181296826024289163431880961506314580935567743910, 407151723612481391724375429193917289623669496278028982297086458062111012958436324350527302865535766565677711383191, 597354385774970715448797740483856119139152021834911852144490298736330354118482480147237280491305029710326837274157, 541106433608213985607913120402276000940203625086988929757276286018099336445558864548353610869729642196223750468493, 417269959280528548156948994397262973057821055108288565091113745409730174626359955737489143948177504667498654245449, 165844467199853002181647516786815801413939363188955720855463610698066730208657222822269457713666541555820608908443, 54875733171006797537647859403084623422036246809497621662400918381496284440644503330411668895858884933248328986102, 465819050441857934210906305127374377291850450707906416261994960542649394393702032587209990932960399224341143990297, 369322923825463715724411404444452360125845865658673947242361968271863944079047696087621731311243573179527276498509, 553158781749591211954659671173145767949897795287325677938373702443265138456771264711232588438786042792968904732769, 409812013938165700887519758386718364160025926340003407045361393371862966914817952304595560620453598830906305966865, 494654868138757552768371639418237489264099471894419220273147503624077564865563661914136003656825657044284503346448, 583613295252460993144403074130901622751986348055784728175987246652496523293580989652454868505577305787293683850652, 45623098408168398769971239387495928980835555721564847009059790575158770295430426790200773274288087331109699336204, 39196430635656777174378129146834600960125068266405306877726260536750371354188413207203531511343645151492477471286]
        self.key = random.randrange(2**BITS)

    def next(self):
        k = bin(self.key)[2:].zfill(64)
        out = 0
        for i in range(64):
            out += self.pub[i] * (ord(k[i]) - 0x30)
        self.key = pow(3, self.key, N)
        return out
        
class Game:
    reds = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
    blacks = {2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35}
    odds = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35}
    evens = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36}

    def __init__(self):
        self.rng = RNG()
        self.seed = []

    def refill(self):
        s = self.rng.next()
        self.seed = []
        while s != 0:
            self.seed.append(s % 37)
            s //= 37
        
    def spin_wheel(self):
        if self.seed == []:
            self.refill()
        number = self.seed.pop()
        return number
            
class Challenge:
    def __init__(self):
        print(topic)
        self.game = Game()
        self.budget = 30
        self.round = 0
        self.exit = False

    def challenge(self, your_input):
        self.round += 1

        if self.budget <= 0:
            self.exit = True
            return {"msg": "You're broke!"}
        elif self.round == 128:
            self.exit = True
            if self.budget >= 1500:
                return {"msg": f"You are a perfect gambler! This is my present: {FLAG}"}
            elif self.budget >= 30:
                return {"msg": "Well Done!"}
            else:
                return {"msg": "You're unlucky :("}
        else:
            try:
                bet = your_input["choice"]
            except KeyError:
                exit(1)

            spin = self.game.spin_wheel()

            if bet == spin:
                msg = "Boom, fantastic guess!"
                self.budget += 35
            elif bet == "EVEN" and spin in self.game.evens:
                msg = "Nice bet!"
                self.budget += 1
            elif bet == "ODD" and spin in self.game.odds:
                msg = "Nice bet!"
                self.budget += 1
            elif bet == "RED" and spin in self.game.reds:
                msg = "Nice bet!"
                self.budget += 1
            elif bet == "BLACK" and spin in self.game.blacks:
                msg = "Nice bet!"
                self.budget += 1
            else:
                msg = "Aww, try again."
                self.budget -= 1
            
            message = ""
            if self.game.seed == []:
                message = "I refill the seed. "

            return {"msg":f"{message}The ball landed on {spin}. {msg}",
                    "round": self.round,
                    "$": self.budget}

if __name__ == "__main__":
    chall = Challenge()
    while True:
        try:
            your_input = json.loads(input())
        except json.decoder.JSONDecodeError:
            break
        output = chall.challenge(your_input)
        print(output)
        if chall.exit:
            break

